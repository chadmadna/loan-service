// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "loan-service/models"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// FetchUserByID provides a mock function with given fields: ctx, userID, opts
func (_m *UserUsecase) FetchUserByID(ctx context.Context, userID uint, opts *models.FetchUserByIDOpts) (*models.User, error) {
	ret := _m.Called(ctx, userID, opts)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *models.FetchUserByIDOpts) (*models.User, error)); ok {
		return rf(ctx, userID, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *models.FetchUserByIDOpts) *models.User); ok {
		r0 = rf(ctx, userID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *models.FetchUserByIDOpts) error); ok {
		r1 = rf(ctx, userID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UserUsecase) Login(ctx context.Context, email string, password string) (models.LoginResponse, string, string, error) {
	ret := _m.Called(ctx, email, password)

	var r0 models.LoginResponse
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.LoginResponse, string, string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.LoginResponse); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(models.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) string); ok {
		r2 = rf(ctx, email, password)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string) error); ok {
		r3 = rf(ctx, email, password)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *UserUsecase) RegisterUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: ctx, user
func (_m *UserUsecase) UpdateProfile(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ViewUsers provides a mock function with given fields: ctx, opts
func (_m *UserUsecase) ViewUsers(ctx context.Context, opts models.ViewUsersOpt) ([]models.User, error) {
	ret := _m.Called(ctx, opts)

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ViewUsersOpt) ([]models.User, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ViewUsersOpt) []models.User); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ViewUsersOpt) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
