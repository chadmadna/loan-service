// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "loan-service/models"
)

// LoanUsecase is an autogenerated mock type for the LoanUsecase type
type LoanUsecase struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: ctx, loan, approver
func (_m *LoanUsecase) ApproveLoan(ctx context.Context, loan *models.Loan, approver *models.User) error {
	ret := _m.Called(ctx, loan, approver)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Loan, *models.User) error); ok {
		r0 = rf(ctx, loan, approver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisburseLoan provides a mock function with given fields: ctx, loan, disburser
func (_m *LoanUsecase) DisburseLoan(ctx context.Context, loan *models.Loan, disburser *models.User) error {
	ret := _m.Called(ctx, loan, disburser)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Loan, *models.User) error); ok {
		r0 = rf(ctx, loan, disburser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchLoanByID provides a mock function with given fields: ctx, loanID, opts
func (_m *LoanUsecase) FetchLoanByID(ctx context.Context, loanID uint, opts *models.FetchLoanOpts) (*models.Loan, error) {
	ret := _m.Called(ctx, loanID, opts)

	var r0 *models.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *models.FetchLoanOpts) (*models.Loan, error)); ok {
		return rf(ctx, loanID, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *models.FetchLoanOpts) *models.Loan); ok {
		r0 = rf(ctx, loanID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *models.FetchLoanOpts) error); ok {
		r1 = rf(ctx, loanID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLoans provides a mock function with given fields: ctx, opts
func (_m *LoanUsecase) FetchLoans(ctx context.Context, opts *models.FetchLoanOpts) ([]models.Loan, error) {
	ret := _m.Called(ctx, opts)

	var r0 []models.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FetchLoanOpts) ([]models.Loan, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FetchLoanOpts) []models.Loan); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FetchLoanOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLoansByUserID provides a mock function with given fields: ctx, userID
func (_m *LoanUsecase) FetchLoansByUserID(ctx context.Context, userID uint) ([]models.Loan, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.Loan, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.Loan); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvestInLoan provides a mock function with given fields: ctx, loan, investor, amount
func (_m *LoanUsecase) InvestInLoan(ctx context.Context, loan *models.Loan, investor *models.User, amount float64) error {
	ret := _m.Called(ctx, loan, investor, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Loan, *models.User, float64) error); ok {
		r0 = rf(ctx, loan, investor, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkLoanBorrowerVisited provides a mock function with given fields: ctx, loan, visitor, attachment
func (_m *LoanUsecase) MarkLoanBorrowerVisited(ctx context.Context, loan *models.Loan, visitor *models.User, attachment io.Reader) error {
	ret := _m.Called(ctx, loan, visitor, attachment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Loan, *models.User, io.Reader) error); ok {
		r0 = rf(ctx, loan, visitor, attachment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartLoan provides a mock function with given fields: ctx, name, product, borrower
func (_m *LoanUsecase) StartLoan(ctx context.Context, name string, product *models.Product, borrower *models.User) (*models.Loan, error) {
	ret := _m.Called(ctx, name, product, borrower)

	var r0 *models.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Product, *models.User) (*models.Loan, error)); ok {
		return rf(ctx, name, product, borrower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Product, *models.User) *models.Loan); ok {
		r0 = rf(ctx, name, product, borrower)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.Product, *models.User) error); ok {
		r1 = rf(ctx, name, product, borrower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanUsecase creates a new instance of LoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanUsecase {
	mock := &LoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
