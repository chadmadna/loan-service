// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "loan-service/services/auth"

	mock "github.com/stretchr/testify/mock"

	models "loan-service/models"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchRoleByRoleType provides a mock function with given fields: ctx, roleType
func (_m *UserRepository) FetchRoleByRoleType(ctx context.Context, roleType auth.RoleType) (*models.Role, error) {
	ret := _m.Called(ctx, roleType)

	var r0 *models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.RoleType) (*models.Role, error)); ok {
		return rf(ctx, roleType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.RoleType) *models.Role); ok {
		r0 = rf(ctx, roleType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.RoleType) error); ok {
		r1 = rf(ctx, roleType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) FetchUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByID provides a mock function with given fields: ctx, userID, opts
func (_m *UserRepository) FetchUserByID(ctx context.Context, userID uint, opts *models.FetchUserByIDOpts) (*models.User, error) {
	ret := _m.Called(ctx, userID, opts)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *models.FetchUserByIDOpts) (*models.User, error)); ok {
		return rf(ctx, userID, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *models.FetchUserByIDOpts) *models.User); ok {
		r0 = rf(ctx, userID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *models.FetchUserByIDOpts) error); ok {
		r1 = rf(ctx, userID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUsers provides a mock function with given fields: ctx, allowedRoles, allowedLoanIDs
func (_m *UserRepository) FetchUsers(ctx context.Context, allowedRoles []auth.RoleType, allowedLoanIDs []uint) ([]models.User, error) {
	ret := _m.Called(ctx, allowedRoles, allowedLoanIDs)

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []auth.RoleType, []uint) ([]models.User, error)); ok {
		return rf(ctx, allowedRoles, allowedLoanIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []auth.RoleType, []uint) []models.User); ok {
		r0 = rf(ctx, allowedRoles, allowedLoanIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []auth.RoleType, []uint) error); ok {
		r1 = rf(ctx, allowedRoles, allowedLoanIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) UpdateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
