// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	email "loan-service/services/email"

	mail "github.com/sendgrid/sendgrid-go/helpers/mail"

	mock "github.com/stretchr/testify/mock"
)

// EmailService is an autogenerated mock type for the EmailService type
type EmailService struct {
	mock.Mock
}

// DefaultSenderAddress provides a mock function with given fields:
func (_m *EmailService) DefaultSenderAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DefaultSenderName provides a mock function with given fields:
func (_m *EmailService) DefaultSenderName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendMail provides a mock function with given fields: ctx, subject, body, from, to, attachment
func (_m *EmailService) SendMail(ctx context.Context, subject string, body string, from mail.Email, to mail.Email, attachment *email.AttachmentOpts) error {
	ret := _m.Called(ctx, subject, body, from, to, attachment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, mail.Email, mail.Email, *email.AttachmentOpts) error); ok {
		r0 = rf(ctx, subject, body, from, to, attachment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailService creates a new instance of EmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailService {
	mock := &EmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
